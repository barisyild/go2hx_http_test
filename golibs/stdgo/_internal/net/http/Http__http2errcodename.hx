package stdgo._internal.net.http;
import stdgo._internal.errors.Errors;
import stdgo._internal.strings.Strings;
import stdgo._internal.time.Time;
import stdgo._internal.os.Os;
import stdgo._internal.bufio.Bufio;
import stdgo._internal.syscall.js.Js;
import stdgo._internal.internal.godebug.Godebug;
import stdgo._internal.net.http.internal.Internal;
import stdgo._internal.reflect.Reflect;
import stdgo._internal.io.Io;
import stdgo._internal.log.Log;
import stdgo._internal.fmt.Fmt;
import stdgo._internal.context.Context;
import stdgo._internal.encoding.base64.Base64;
import stdgo._internal.net.http.internal.ascii.Ascii;
import stdgo._internal.net.textproto.Textproto;
import stdgo._internal.strconv.Strconv;
import stdgo._internal.net.Net;
import stdgo._internal.io.fs.Fs;
import stdgo._internal.sort.Sort;
import stdgo._internal.mime.Mime;
import stdgo._internal.path.filepath.Filepath;
import stdgo._internal.mime.multipart.Multipart;
import stdgo._internal.path.Path;
import stdgo._internal.encoding.binary.Binary;
import stdgo._internal.runtime.Runtime;
import stdgo._internal.bytes.Bytes;
import _internal.golangdotorg.x.net.http.httpguts.Httpguts;
import _internal.golangdotorg.x.net.idna.Idna;
import stdgo._internal.net.http.httptrace.Httptrace;
import stdgo._internal.net.url.Url;
import _internal.golangdotorg.x.net.http.httpproxy.Httpproxy;
import _internal.golangdotorg.x.net.http2.hpack.Hpack;
import stdgo._internal.sync.atomic_.Atomic_;
import stdgo._internal.math.rand.Rand;
import stdgo._internal.sync.Sync;
import stdgo._internal.compress.gzip.Gzip;
import stdgo._internal.crypto.tls.Tls;
import stdgo._internal.container.list.List;
import stdgo._internal.internal.safefilepath.Safefilepath;
var _http2errCodeName : stdgo.GoMap<stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode, stdgo.GoString> = ({
        final x = new stdgo.GoMap.GoIntMap<stdgo.GoString>();
        x.__defaultValue__ = () -> ("" : stdgo.GoString);
        x.set((0u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("NO_ERROR" : stdgo.GoString));
x.set((1u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("PROTOCOL_ERROR" : stdgo.GoString));
x.set((2u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("INTERNAL_ERROR" : stdgo.GoString));
x.set((3u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("FLOW_CONTROL_ERROR" : stdgo.GoString));
x.set((4u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("SETTINGS_TIMEOUT" : stdgo.GoString));
x.set((5u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("STREAM_CLOSED" : stdgo.GoString));
x.set((6u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("FRAME_SIZE_ERROR" : stdgo.GoString));
x.set((7u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("REFUSED_STREAM" : stdgo.GoString));
x.set((8u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("CANCEL" : stdgo.GoString));
x.set((9u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("COMPRESSION_ERROR" : stdgo.GoString));
x.set((10u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("CONNECT_ERROR" : stdgo.GoString));
x.set((11u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("ENHANCE_YOUR_CALM" : stdgo.GoString));
x.set((12u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("INADEQUATE_SECURITY" : stdgo.GoString));
x.set((13u32 : stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode), ("HTTP_1_1_REQUIRED" : stdgo.GoString));
        x;
    } : stdgo.GoMap<stdgo._internal.net.http.Http_t_http2errcode.T_http2ErrCode, stdgo.GoString>);
