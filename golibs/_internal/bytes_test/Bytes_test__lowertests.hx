package _internal.bytes_test;
var _lowerTests : stdgo.Slice<_internal.bytes_test.Bytes_test_stringtest.StringTest> = (new stdgo.Slice<_internal.bytes_test.Bytes_test_stringtest.StringTest>(8, 8, ...[(new _internal.bytes_test.Bytes_test_stringtest.StringTest((stdgo.Go.str() : stdgo.GoString)?.__copy__(), ((stdgo.Go.str() : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>)) : _internal.bytes_test.Bytes_test_stringtest.StringTest), (new _internal.bytes_test.Bytes_test_stringtest.StringTest(("abc" : stdgo.GoString), ((("abc" : stdgo.GoString) : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>)) : _internal.bytes_test.Bytes_test_stringtest.StringTest), (new _internal.bytes_test.Bytes_test_stringtest.StringTest(("AbC123" : stdgo.GoString), ((("abc123" : stdgo.GoString) : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>)) : _internal.bytes_test.Bytes_test_stringtest.StringTest), (new _internal.bytes_test.Bytes_test_stringtest.StringTest(("azAZ09_" : stdgo.GoString), ((("azaz09_" : stdgo.GoString) : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>)) : _internal.bytes_test.Bytes_test_stringtest.StringTest), (new _internal.bytes_test.Bytes_test_stringtest.StringTest(("longStrinGwitHmixofsmaLLandcAps" : stdgo.GoString), ((("longstringwithmixofsmallandcaps" : stdgo.GoString) : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>)) : _internal.bytes_test.Bytes_test_stringtest.StringTest), (new _internal.bytes_test.Bytes_test_stringtest.StringTest(("LONGⱯSTRINGⱯWITHⱯNONASCIIⱯCHARS" : stdgo.GoString), ((("longɐstringɐwithɐnonasciiɐchars" : stdgo.GoString) : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>)) : _internal.bytes_test.Bytes_test_stringtest.StringTest), (new _internal.bytes_test.Bytes_test_stringtest.StringTest(("ⱭⱭⱭⱭⱭ" : stdgo.GoString), ((("ɑɑɑɑɑ" : stdgo.GoString) : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>)) : _internal.bytes_test.Bytes_test_stringtest.StringTest), (new _internal.bytes_test.Bytes_test_stringtest.StringTest(("A\u0080\u{0010ffff}" : stdgo.GoString), ((("a\u0080\u{0010ffff}" : stdgo.GoString) : stdgo.GoString) : stdgo.Slice<stdgo.GoUInt8>)) : _internal.bytes_test.Bytes_test_stringtest.StringTest)].concat([for (i in 8 ... (8 > 8 ? 8 : 8 : stdgo.GoInt).toBasic()) ({} : _internal.bytes_test.Bytes_test_stringtest.StringTest)])) : stdgo.Slice<_internal.bytes_test.Bytes_test_stringtest.StringTest>);
