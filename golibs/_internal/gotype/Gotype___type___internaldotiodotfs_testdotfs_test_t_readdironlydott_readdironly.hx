package _internal.gotype;
@:noCompletion var __type___internaldotiodotfs_testdotFs_test_t_readdironlydotT_readDirOnly = stdgo._internal.internal.reflect.GoType.named("_internal.io.fs_test.Fs_test_t_readdironly.T_readDirOnly", [new stdgo._internal.internal.reflect.MethodType("open", { get : () -> stdgo._internal.internal.reflect.GoType.signature(false, { get : () -> [stdgo._internal.internal.reflect.GoType.basic(string_kind)] }, { get : () -> [_internal.gotype.Gotype___type__stdgodot_internaldotiodotfsdotfs_filedotfile.__type__stdgodot_internaldotiodotfsdotFs_filedotFile, _internal.gotype.Gotype___type__stdgodoterror.__type__stdgodotError] }, { get : () -> stdgo._internal.internal.reflect.GoType.invalidType }) }, { get : () -> stdgo._internal.internal.reflect.GoType.invalidType }), new stdgo._internal.internal.reflect.MethodType("readDir", { get : () -> stdgo._internal.internal.reflect.GoType.signature(false, { get : () -> [stdgo._internal.internal.reflect.GoType.basic(string_kind)] }, { get : () -> [stdgo._internal.internal.reflect.GoType.sliceType({ get : () -> _internal.gotype.Gotype___type__stdgodot_internaldotiodotfsdotfs_direntrydotdirentry.__type__stdgodot_internaldotiodotfsdotFs_direntrydotDirEntry }), _internal.gotype.Gotype___type__stdgodoterror.__type__stdgodotError] }, { get : () -> stdgo._internal.internal.reflect.GoType.invalidType }) }, { get : () -> stdgo._internal.internal.reflect.GoType.invalidType })], stdgo._internal.internal.reflect.GoType.structType([{ name : "readDirFS", embedded : true, tag : "", type : { get : () -> _internal.gotype.Gotype___type__stdgodot_internaldotiodotfsdotfs_readdirfsdotreaddirfs.__type__stdgodot_internaldotiodotfsdotFs_readdirfsdotReadDirFS }, optional : false }]), false, { get : () -> null });
