package _internal.unicodedottest;
import _internal.unicode_test.Unicode_test;
import stdgo._internal.testing.internal.testdeps.Testdeps;
import stdgo._internal.testing.Testing;
var _tests : stdgo.Slice<stdgo._internal.testing.Testing_internaltest.InternalTest> = (new stdgo.Slice<stdgo._internal.testing.Testing_internaltest.InternalTest>(28, 28, ...[
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestDigit" : stdgo.GoString), _internal.unicode_test.Unicode_test_testdigit.testDigit) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestDigitOptimization" : stdgo.GoString), _internal.unicode_test.Unicode_test_testdigitoptimization.testDigitOptimization) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsControlLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testiscontrollatin1.testIsControlLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsLetterLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testisletterlatin1.testIsLetterLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsUpperLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testisupperlatin1.testIsUpperLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsLowerLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testislowerlatin1.testIsLowerLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestNumberLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testnumberlatin1.testNumberLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsPrintLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testisprintlatin1.testIsPrintLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsGraphicLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testisgraphiclatin1.testIsGraphicLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsPunctLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testispunctlatin1.testIsPunctLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsSpaceLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testisspacelatin1.testIsSpaceLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsSymbolLatin1" : stdgo.GoString), _internal.unicode_test.Unicode_test_testissymbollatin1.testIsSymbolLatin1) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsLetter" : stdgo.GoString), _internal.unicode_test.Unicode_test_testisletter.testIsLetter) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsUpper" : stdgo.GoString), _internal.unicode_test.Unicode_test_testisupper.testIsUpper) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestTo" : stdgo.GoString), _internal.unicode_test.Unicode_test_testto.testTo) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestToUpperCase" : stdgo.GoString), _internal.unicode_test.Unicode_test_testtouppercase.testToUpperCase) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestToLowerCase" : stdgo.GoString), _internal.unicode_test.Unicode_test_testtolowercase.testToLowerCase) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestToTitleCase" : stdgo.GoString), _internal.unicode_test.Unicode_test_testtotitlecase.testToTitleCase) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestIsSpace" : stdgo.GoString), _internal.unicode_test.Unicode_test_testisspace.testIsSpace) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestLetterOptimizations" : stdgo.GoString), _internal.unicode_test.Unicode_test_testletteroptimizations.testLetterOptimizations) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestTurkishCase" : stdgo.GoString), _internal.unicode_test.Unicode_test_testturkishcase.testTurkishCase) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestSimpleFold" : stdgo.GoString), _internal.unicode_test.Unicode_test_testsimplefold.testSimpleFold) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestCalibrate" : stdgo.GoString), _internal.unicode_test.Unicode_test_testcalibrate.testCalibrate) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestLatinOffset" : stdgo.GoString), _internal.unicode_test.Unicode_test_testlatinoffset.testLatinOffset) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestSpecialCaseNoMapping" : stdgo.GoString), _internal.unicode_test.Unicode_test_testspecialcasenomapping.testSpecialCaseNoMapping) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestNegativeRune" : stdgo.GoString), _internal.unicode_test.Unicode_test_testnegativerune.testNegativeRune) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestCategories" : stdgo.GoString), _internal.unicode_test.Unicode_test_testcategories.testCategories) : stdgo._internal.testing.Testing_internaltest.InternalTest),
(new stdgo._internal.testing.Testing_internaltest.InternalTest(("TestProperties" : stdgo.GoString), _internal.unicode_test.Unicode_test_testproperties.testProperties) : stdgo._internal.testing.Testing_internaltest.InternalTest)].concat([for (i in 28 ... (28 > 28 ? 28 : 28 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.testing.Testing_internaltest.InternalTest)])) : stdgo.Slice<stdgo._internal.testing.Testing_internaltest.InternalTest>);
var _benchmarks : stdgo.Slice<stdgo._internal.testing.Testing_internalbenchmark.InternalBenchmark> = (new stdgo.Slice<stdgo._internal.testing.Testing_internalbenchmark.InternalBenchmark>(0, 0, ...[].concat([for (i in 0 ... (0 > 0 ? 0 : 0 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.testing.Testing_internalbenchmark.InternalBenchmark)])) : stdgo.Slice<stdgo._internal.testing.Testing_internalbenchmark.InternalBenchmark>);
var _fuzzTargets : stdgo.Slice<stdgo._internal.testing.Testing_internalfuzztarget.InternalFuzzTarget> = (new stdgo.Slice<stdgo._internal.testing.Testing_internalfuzztarget.InternalFuzzTarget>(0, 0, ...[].concat([for (i in 0 ... (0 > 0 ? 0 : 0 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.testing.Testing_internalfuzztarget.InternalFuzzTarget)])) : stdgo.Slice<stdgo._internal.testing.Testing_internalfuzztarget.InternalFuzzTarget>);
var _examples : stdgo.Slice<stdgo._internal.testing.Testing_internalexample.InternalExample> = (new stdgo.Slice<stdgo._internal.testing.Testing_internalexample.InternalExample>(14, 14, ...[
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("Example_is" : stdgo.GoString), _internal.unicode_test.Unicode_test_example_is.example_is, ("For \'\\b\':\n\tis control rune\n\tis not printable rune\nFor \'5\':\n\tis digit rune\n\tis graphic rune\n\tis number rune\n\tis printable rune\nFor \'Ὂ\':\n\tis graphic rune\n\tis letter rune\n\tis printable rune\n\tis upper case rune\nFor \'g\':\n\tis graphic rune\n\tis letter rune\n\tis lower case rune\n\tis printable rune\nFor \'̀\':\n\tis graphic rune\n\tis mark rune\n\tis printable rune\nFor \'9\':\n\tis digit rune\n\tis graphic rune\n\tis number rune\n\tis printable rune\nFor \'!\':\n\tis graphic rune\n\tis printable rune\n\tis punct rune\nFor \' \':\n\tis graphic rune\n\tis printable rune\n\tis space rune\nFor \'℃\':\n\tis graphic rune\n\tis printable rune\n\tis symbol rune\nFor \'ᾭ\':\n\tis graphic rune\n\tis letter rune\n\tis printable rune\n\tis title case rune\nFor \'G\':\n\tis graphic rune\n\tis letter rune\n\tis printable rune\n\tis upper case rune\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleSimpleFold" : stdgo.GoString), _internal.unicode_test.Unicode_test_examplesimplefold.exampleSimpleFold, ("U+0061 \'a\'\nU+0041 \'A\'\nU+006B \'k\'\nU+212A \'K\'\nU+004B \'K\'\nU+0031 \'1\'\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleTo" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampleto.exampleTo, ("U+0047 \'G\'\nU+0067 \'g\'\nU+0047 \'G\'\nU+0047 \'G\'\nU+0067 \'g\'\nU+0047 \'G\'\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleToLower" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampletolower.exampleToLower, ("U+0067 \'g\'\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleToTitle" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampletotitle.exampleToTitle, ("U+0047 \'G\'\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleToUpper" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampletoupper.exampleToUpper, ("U+0047 \'G\'\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleSpecialCase" : stdgo.GoString), _internal.unicode_test.Unicode_test_examplespecialcase.exampleSpecialCase, ("U+0069 \'i\'\nU+0130 \'İ\'\nU+0130 \'İ\'\nU+0069 \'i\'\nU+0130 \'İ\'\nU+0130 \'İ\'\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleIsDigit" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampleisdigit.exampleIsDigit, ("true\nfalse\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleIsNumber" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampleisnumber.exampleIsNumber, ("true\nfalse\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleIsLetter" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampleisletter.exampleIsLetter, ("true\nfalse\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleIsLower" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampleislower.exampleIsLower, ("true\nfalse\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleIsUpper" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampleisupper.exampleIsUpper, ("true\nfalse\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleIsTitle" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampleistitle.exampleIsTitle, ("true\nfalse\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample),
(new stdgo._internal.testing.Testing_internalexample.InternalExample(("ExampleIsSpace" : stdgo.GoString), _internal.unicode_test.Unicode_test_exampleisspace.exampleIsSpace, ("true\ntrue\ntrue\nfalse\n" : stdgo.GoString), false) : stdgo._internal.testing.Testing_internalexample.InternalExample)].concat([for (i in 14 ... (14 > 14 ? 14 : 14 : stdgo.GoInt).toBasic()) ({} : stdgo._internal.testing.Testing_internalexample.InternalExample)])) : stdgo.Slice<stdgo._internal.testing.Testing_internalexample.InternalExample>);
function main():Void {
    var _m = stdgo._internal.testing.Testing_mainstart.mainStart(stdgo.Go.asInterface((new stdgo._internal.testing.internal.testdeps.Testdeps_testdeps.TestDeps() : stdgo._internal.testing.internal.testdeps.Testdeps_testdeps.TestDeps)), _tests, _benchmarks, _fuzzTargets, _examples);
    //"file:///Users/o/Library/Caches/go-build/57/575bbbcbccea69bb9f60936d79e7157c7c291fc45a3e8b9cafbd25bfcc86e7bd-d#L131"
    #if (sys || hxnodejs) Sys.exit(_m.run()) #else null #end;
}
@:keep var __init_go2hx__ = {
    try {
        var __tmp__0 = _internal.unicodedottest.Unicodedottest._tests, __tmp__1 = _internal.unicodedottest.Unicodedottest._benchmarks, __tmp__2 = _internal.unicodedottest.Unicodedottest._fuzzTargets, __tmp__3 = _internal.unicodedottest.Unicodedottest._examples;
        stdgo._internal.testing.internal.testdeps.Testdeps_importpath.importPath = ("unicode" : stdgo.GoString);
    } catch(__exception__) if (__exception__.message != "__return__") throw __exception__;
    true;
};
