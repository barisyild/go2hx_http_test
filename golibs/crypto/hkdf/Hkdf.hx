package crypto.hkdf;
/**
    * Package hkdf implements the HMAC-based Extract-and-Expand Key Derivation
    * Function (HKDF) as defined in RFC 5869.
    * 
    * HKDF is a cryptographic key derivation function (KDF) with the goal of
    * expanding limited input keying material into one or more cryptographically
    * strong secret keys.
**/
class Hkdf {
    /**
        * Extract generates a pseudorandom key for use with Expand from an input secret
        * and an optional independent salt.
        * 
        * Only use this function if you need to reuse the extracted key with multiple
        * Expand invocations and different context values. Most common scenarios,
        * including the generation of multiple keys, should use New instead.
    **/
    static public inline function extract(_hash:() -> stdgo._internal.hash.Hash_hash.Hash, _secret:stdgo.Slice<stdgo.GoUInt8>, _salt:stdgo.Slice<stdgo.GoUInt8>):stdgo.Slice<stdgo.GoUInt8> return _internal.golangdotorg.x.crypto.hkdf.Hkdf_extract.extract(_hash, _secret, _salt);
    /**
        * Expand returns a Reader, from which keys can be read, using the given
        * pseudorandom key and optional context info, skipping the extraction step.
        * 
        * The pseudorandomKey should have been generated by Extract, or be a uniformly
        * random or pseudorandom cryptographically strong key. See RFC 5869, Section
        * 3.3. Most common scenarios will want to use New instead.
    **/
    static public inline function expand(_hash:() -> stdgo._internal.hash.Hash_hash.Hash, _pseudorandomKey:stdgo.Slice<stdgo.GoUInt8>, _info:stdgo.Slice<stdgo.GoUInt8>):stdgo._internal.io.Io_reader.Reader return _internal.golangdotorg.x.crypto.hkdf.Hkdf_expand.expand(_hash, _pseudorandomKey, _info);
    /**
        * New returns a Reader, from which keys can be read, using the given hash,
        * secret, salt and context info. Salt and info can be nil.
    **/
    static public inline function new_(_hash:() -> stdgo._internal.hash.Hash_hash.Hash, _secret:stdgo.Slice<stdgo.GoUInt8>, _salt:stdgo.Slice<stdgo.GoUInt8>, _info:stdgo.Slice<stdgo.GoUInt8>):stdgo._internal.io.Io_reader.Reader return _internal.golangdotorg.x.crypto.hkdf.Hkdf_new_.new_(_hash, _secret, _salt, _info);
}
